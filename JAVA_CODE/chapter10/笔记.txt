目录
    类变量和类方法
    理解main方法语句
    代码块
    单例设计模式
    final关键字
    抽象类
    接口
    内部类

类变量和类方法
    类变量
        传统方法解决存在的问题：
            1.count是一个独立于对象的变量
            2.以后访问count很麻烦
            3.引出静态变量
        类变量布局分析
            不论类变量/静态变量放在哪里，其都是被同一个类所有对象共享，所以不影响使用
            jdk8以前，在方法区，jdk8之后放在堆，放在堆里面这个类对应的class对象，所以类加载时就生成了，
            没有对象实例也可以访问，反射...

        定义
            类变量也叫静态变量，时该类的所有对象共享的变量，任何一个该类的回想访问它时，取到的都是相同的值，修改也是。
        语法
            访问修饰符 static 数据类型 变量名;
            static 访问修饰符 数据类型 变量名;
            类名/对象名.类变量名，推荐使用类名.类变量名
            访问类变量也遵循相关的访问权限

        类变量细节：
            1.什么时候需要：所有对象公用一个属性，就可以考虑使用静态变量
            2.类变量是所有对象共用的属性，而实例变量是每个对象独有的
            3.加上static才是类变量，否则是普通变量
            4.类变量可以通过类名访问，也可以通过对象名访问，推荐用类名
            5.实例变量不能用过类名访问
            6.类变量在加载是就初始化了，也就是说即使没有创建对象，只要类加载了就可以使用类变量了
            7.类变量的生命周期是随类的加载开始，随类的消亡和销毁

    类方法
        也叫静态方法，形式同上，访问也是同上
        //好处，不创建实例也可以调用某个方法，即当工具使用
        经典使用场景：当方法中不涉及到任何和对象相关的成员，则可以设计成静态方法提高开发效率
        细节：
            1.类方法和普通方法都是随类的加载而加载，将结构信息存在方法去，类方法中无this的参数
            2.类方法可以通过类名或对象名调用
            3.普通对象不能通过类名调用
            4.类方法不允许使用和对象有关的关键字，不如this和super
            5.静态方法只能访问静态变量或方法
            6.普通成员方法，即可以访问静态方法，也可以访问非静态方法

理解main方法语句
    public static void main(String[] args) {

    }
    深入理解main方法：
        1.main方法是虚拟机调用的
        2.java虚拟机需要调用main方法，因此，该方法权限必须是public
        3.java虚拟机在执行main方法时不必创建对象，因此方法必须是static
        4.该方法接收String类型数组，该数组保存执行java命令时传递给所运行的类的参数，

    main方法可以直接调用main方法所在类中的静态方法和属性
    但是不能直接访问类中的非静态成员，必须创建一个实例对象后才能通过对象访问类中静态成员
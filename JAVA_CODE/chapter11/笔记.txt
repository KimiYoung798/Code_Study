目录
    枚举介绍
    自定义类实现枚举
    enum关键字实现枚举
    jdk内置的基本注解类型
    元注解：对注解进行注解

枚举介绍
    把具体的对象一个一个的列举出来的类称为枚举类
    枚举是一组常量的集合
    可以理解成 枚举属于一种特殊的类，里面只包含一组特定的对象
自定义类实现枚举
    1.不需要提供set方法
    2.枚举对象/属性使用final + static共同修饰，实现底层优化
    3.枚举对象名通常全部大写
    4.枚举对象根据需要也可以有多个属性
enum关键字实现枚举
    注意：
        1.使用enum关键字，会自动继承Enum类，而且是一个final类
        2.传统public static final Season SPRING = new Season("春天", "温暖");简化SPRING("春天", "温暖")调用哪里的构造器
        3.如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略
        4.当多个枚举对象，使用，分隔，最后有一个；
        5.枚举对象必须放在枚举类首行
    方法：
        1) toString:Enum 类已经重写过了，返回的是当前对象名,子类可以重写该方法，用于返回对象的属性信息
        2) name：返回当前对象名（常量名），子类中不能重写
        3) ordinal：返回当前对象的位置号，默认从 0 开始
        4) values：返回当前枚举类中所有的常量
        5) valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常！
        6) compareTo：比较两个枚举常量，比较的就是编号
jdk内置的基本注解类型
    1) 注解(Annotation)也被称为元数据(Metadata)，用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。
    2) 和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。
    3) 在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等基本的 Annotation 介绍
    使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素
    三个基本的 Annotation:
        1) @Override: 限定某个方法，是重写父类方法, 该注解只能用于方法
        2) @Deprecated: 用于表示某个程序元素(类, 方法等)已过时
        3) @SuppressWarnings: 抑制编译器警告
元注解：对注解进行注解
    1) Retention //指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME
    2) Target // 指定注解可以在哪些地方使用
    3) Documented //指定该注解是否会在 javadoc 体现
    4) Inherited //子类会继承父类注
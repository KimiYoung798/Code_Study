集合
    集合框架图
    Collection接口特点 方法
    Collection接口的子接口：List实现类：ArrayList LinkedList Vector
    Collection接口的子接口：Set实现类：HashSet linkedHashSet
    Map接口 特点方法 遍历方式
    Map接口的实现类：HashMap Hashtable
    Collections工具类的使用


集合框架图
    集合的理解和好处
        数组：
            1.长度开始时必须指定，而且一旦指定，不能更改
            2.保存的必须为同一类型元素
            3.使用数组进行增加元素的代码比较麻烦

        集合：
            1.可以动态保存任意多个对象，使用比较方便
            2.提供了一系列方便的操作对象的方法：add、remove、set、get
            3.使用集合添加、删除新元素代码简洁

    单列集合
                           | - TreeSet
                 | - Set - | - HashSet
                 |
    Collection - |
                 |          | - LinkedList
                 | - List - | - ArrayList
                            | - Vector

    双列集合 - 键值对
          | - Hashtable - | - Properties
          |
    Map - | - HashMap - LinkedHashMap
          |
          | - TreeMap

Collection接口特点 方法
    1.Collection的实现子类可以存放多个元素，每个元素可以是Object
    2.有些Collection的实现类，可以存放重复的元素，有些不可以
    3.有些Collection的实现类，有些是存放有序的List，有些不是有序的Set
    4.Collection接口没有直接的实现子类，是通过Set和List来实现的

    常用方法
        1.add
        2.remove
        3.contains查找元素是否存在
        4.size 获取元素个数
        5.isEmpty 判断是否为空
        6.clear 清空
        7.addAll 添加多个
        8.containsAll 查找多个元素是否都存在
        9.removeAll 删除多个
        10.
    Collection接口遍历方式：
        方法一：使用迭代器 - Iterator
            1.Iterator对象称为迭代器，主要用于遍历Collection集合中的元素
            2.所有实现了Collection接口的集合类都有一个iterator方法，用以返回一个实现了Iterator接口的对象，即可以返回一个迭代器
            3.结构：
                Iterator it = coll.iterator();//得到一个集合的迭代器
                //hasNext():判断是否还有下一个元素
                while(it.hasNext()){
                    //next();指针下移
                    System.out.println(it.next());
                }//调用next之前必须先用hasNext检测，否则会报错
                //如果还需要重新遍历，需要重置迭代器it = coll.iterator();
            4.Iterator仅用于遍历集合，Iterator本身并不存放对象
        方法一：增强for
            增强for循环可以代替迭代器，就是简化后的迭代器，本质是一样的
            基本语法：
                for(元素类型 元素名：集合或数组名){
                    访问元素
                }

Collection接口的子接口：List实现类：ArrayList LinkedList Vector
    List接口基本介绍：
        1.List集合类中元素有序且可重复
        2.List集合类中的每个元素都有对应的顺序索引，即支持索引
        3.List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素
        4.实现的类有ArrayList LinkedList Vector
    方法：
        1.add
        2.addAll
        3.get
        4.indexOf
        5.lastIndex
        6.remove
        7.set
        8.subList

    遍历方式：
        1.迭代器iterator
        2.增强for
        3.普通for

    ArrayList
        注意：
            1.可以放任何值包括null
            2.本身是由数组实现数据存储
            3.基本与Vector等同，除了ArrayList是线程不安全的，但执行效率高，多线程不建议使用AL
        扩容原理
            ArrayList中维护了一个Object类型的数组elementData
            当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第一次添加则扩容为10，再次添加则扩容至1.5倍
            如果是指定大小，则初始为指定大小，需要扩容就扩容至1.5倍
    Vector
        线程安全
        扩容原理
            如果使用的是无参构造器，则初始elementData容量为0，第一次添加则扩容为10，再次添加则扩容至2倍
            如果是指定大小，则初始为指定大小，需要扩容就扩容至2倍

    LinkedList -
        底层实现了双向链表和双端队列特点
        线程不安全
        底层机制：
            1) LinkedList底层维护了一个双向链表.
            2) LinkedList中维护了两个属性first和last分别指向 首节点和尾节点
            3)每个节点（Node对象），里面又维护了prev、next、item三个属性，其中通过prev指向前一个，通过next指向后一个节点。最终实现双向链表.
            4) 所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高。

    集合选择：
        1）如果我们改查的操作多，选择ArrayList
        2)如果我们增删的操作多，选择LinkedList
        3) 一般来说，在程序中，80%-90%都是查询，因此大部分情况下会选择ArrayList
        4) 在一个项目中，根据业务灵活选择

Collection接口的子接口：Set实现类：HashSet linkedHashSet
    Set接口基本介绍
        无序的，没有索引
        不允许重复，所以最多包含一个null
        实现的类有TreeSet HashSet等
    方法
        与list相同，也是Collection的子接口，常用方法和Collection一样
    遍历
        只能使用迭代器和增强for，不能使用索引

    HashSet
        1.HashSet实现了Set接口
        2.底层其实是HashMap
        3.可以存放null 但只能有一个
        4.HashSet不保证元素有序，取决于Hash后，再确定索引的结果
        5.不能有重复元素 -- 真正含义

        HashSet底层机制
            底层是HashMap - HashMap底层是 数组+链表+红黑树
            分析HashSet添加元素底层是如何实现
                1.HashSet底层是HashMap
                2.添加一个元素时，先得到Hash值 - 会转成 索引值
                3.找到存储数据表table，看这个索引位置是否已经放的有元素
                4.如果没有，直接加入
                5.如果有，调用equals比较，如果相同，放弃添加，如果不同，则添加到最后
                6.java8中，如果一个链表的元素个数到达TREEIFY_THRESHOLD默认是8，并且table的大小>=MIN_TREEIFY_CAPACITY默认64，就会进行树化


Map接口 特点方法 遍历方式



Map接口的实现类：HashMap Hashtable



Collections工具类的使用




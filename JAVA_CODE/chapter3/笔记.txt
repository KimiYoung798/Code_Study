目录
	变量介绍
	+ 使用
	数据类型
	编码
	数据类型转换

变量介绍：
	为什么需要变量
		变量是程序的基本组成单位
		类型+名称+值 =>变量三要素

	细节		
		数据类型不同，空间大小不同
		该区域有自己的名称和值
		变量必须先声明后使用
		该区域的数据和值可以在同意范围内不断变化
		在一个作用域中不能重名
		注意变量三要素

+ 使用：
	当左右都是数值型时，做加法运算
	左右两边有一方为字符串，则作拼接运算
	运算顺序从左到右

数据类型：
	每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间

	基本数据类型：
		数值型：
			整数 byte[1] short[2] int[4] long[8]
			浮点 float[4] double[8]
		字符型：
			char[2] 存放单个字符
		布尔：Boolean
			boolean[1] 存放true，false，不可以用整数0 1代替真假
	引用数据类型：
			类class
			接口interface
			数组[]

	API使用：
		matools.com
		java类组织形式：JDK -> package -> interface/class/error 
						class -> 字段，构造方法 成员方法
		1.按照包找类，再找方法
		2.直接检索
	char 本质是一个整数，输出时是Unicode码对应的字符，也可以运算；
		本质探讨：将字符对用的码值找出来
			'a' ==> 97 ==> 二进制 ==> 存储
由字符编码表决定
	ASCII 一个字节 128个字符
	Unicode 两个字节表示字符，字母和汉字都占两个字符
	utf-8 可变编码，字母一个字节，汉字使用三个字节
	GBK 字母一个字节，汉字两个字节
	GB2312 < GBK
	BIG5 存放繁体

数据类型转换
	低精度往高精度自动转换
	char -> int -> long -> float -> double
	byte -> short -> int -> long -> float -> double

	注意事项：
		1.多种类型混合运算，系统将所有数据类型转成容量最大类型再进行计算
		2.把精度大的数据类型赋值给精度小的就会报错，反之则自动转换
		3.[byte，short]和char之间不会自动转换
		4.byte，short和char 之间运算精度默认提升int，只要运算就是int
		5.Boolean不参与自动转换
		6.表达式结果自动提升为表达式中精度最大类型

	强制类型转换：(类型)表达式
		有意识将精度降低，造成数据溢出，谨慎

	细节：
		大->小 一般强制类型转换
		强转符号只对近的操作数有效，往往使用小括号提升优先级
		char可以保存int的常量值，但不能保存int的变量值，需要强转
		byte short 在运行是当作int处理

	基本数据类型和String类型的转换
		String s = n + '';
		反之，int integer.pareInt(s5); 
		使用基本数据类型对应的包装类的相应方法，得到基本数据
		String -> char
			s.charAt(1)   //得到s的第二个字符。

		注意：
			确保String转换是有效数据
			格式不正确会抛出异常，程序就会终止。




程序控制结构
	顺序控制
	分支控制
	循环控制
	break
	continue
	return

顺序控制
	从上至下

分支控制
	if-else
		可以嵌套使用，内层分支，外层分支，不要超过三层，可读性不好。
		单分支基本语法：
			if(条件语句){
				执行代码块
			}
			条件为真执行代码块，否则不执行
		双分支：
			if(条件语句){
				执行代码块1
			}else{
				执行代码块2
			}
			条件为真执行代码块1，否则执行代码块2
		多分支：
			if(条件语句1){
				执行代码块1
			}else if(条件语句2){
				执行代码块2
			}...
			else{
				执行代码块3
			}
			特别说明，多分支可以没有else

	switch分支
		switch(表达式){
			case 常量1:
				代码块1
				break;
			....

			default:
				代码块n；
				break;
		}
		没有break，会执行后面的代码块，而不会进行判断，称为穿过。
		
		细节：
			1.表达式数据类型应与case后的常量类型一致或可以自动转成可比较的类型；
			2.表达式的返回值必须是 byte,short,int,char,enum,String
			3.case句子中必须是常量，不能是变量
			4.default是可选的
			5.break的使用

	选择：
		判断具体数值不多，且类型为byte,short,int,char,enum,String，使用switch
		区间判断或Boolean用if

循环控制：
	for循环：
		基本语法：
			for(循环变量初始化;循环条件;循环变量迭代){
				循环操作代码块
			}

		细节：
			1.循环条件是一个Boolean值表达式
			2.for(;;),初始化和变量迭代可以写在其他地方，但分号不能省略

	while循环：
		基本语法：
			while(循环条件) {
				循环体；
				循环变量迭代；
			}

	do while：
		do{
			循环体；
			循环变量迭代；
		}while(循环条件)；

	说明： 先执行再判断，最后有个；

多重循环：
	略

break
	跳出当前循环
	细节：
		1.在多层嵌套中可以通过标签指明终止哪一层循环：标签名: break 标签名
		2.尽量不要使用
		3.如果没有指定，默认退出最近一层

continue
	结束本次循环，继续下一次循环，标签使用规则同上
	
return
	使用在方法中，跳出所在方法，用在主方法中说明程序结束






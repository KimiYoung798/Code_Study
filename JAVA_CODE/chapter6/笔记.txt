数组、排序和查找

数组
	存放多个同一类型的数据，数组也是一种数据类型，是一种引用类型
	数据类型[] 变量 = {ele1, ele2, ... , elen};
	下标是从0开始编号，用for循环遍历访问数组的元素；
	初始化：
		动态初始化 int a[] = new int[5]; 或  int a[]; a = new int[5];
		静态初始化 数据类型[] 变量 = {ele1, ele2, ... , elen};

	细节：
		1) 数组是多个相同类型数据的组合，实现对这些数据的统一管理
		2) 数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。
		3) 数组创建后，如果没有赋值，有默认值int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null
		4) 使用数组的步骤 1. 声明数组并开辟空间 2 给数组各个元素赋值 3 使用数组
		5) 数组的下标是从 0 开始的。
		6) 数组下标必须在指定范围内使用，否则报：下标越界异常，比如int [] arr=new int[5]; 则有效下标为 0-4

	赋值机制：
		默认情况下是引用传递，赋值的是地址，赋值方式为引用传达
		arr1 赋值给 arr2 ,修改aar2，arr1的值也会变化。
		值传递就是拷贝 引用传递类似指针

	数组的拷贝：
		int[] arr1 = {10, 20, 30};
		//开辟一个新的空间
		int[] arr2 = new int[arr1.length];
		for循环拷贝

	数组反转：
		头尾交换
		或逆序赋值

	对数组扩容：
		赋值新数组，再将原来数组赋值为新数组地址

排序
	冒泡bubble sorting 

查找
	顺序查找
	二分查找

多维数组
	int[][] arry = {{},{},...,{}}
	可以列数不确定

注意：
	1) 一维数组的声明方式有:
		int[] x 或者 int x[]
	2) 二维数组的声明方式有:
		int[][] y 或者 int[] y[] 或者 int y[][]
	3) 二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。
		比如：
			 map[][] 是一个二维数组int map [][] = {{1,2},{3,4,5}}由 map[0] 是一个含有两个元素的一维数组 ，
			map[1] 是一个含有三个元素的一维数组构成，我们也称为列数不等的二维数组



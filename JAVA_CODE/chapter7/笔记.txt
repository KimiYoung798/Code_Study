面向对象编程
	类与对象
	成员方法
	成员方法传参机制
	重载 overload
	可变参数
	作用域
	构造器
	this


类与对象
	现有技术不利于数据的管理，效率低
	OOP 用对象表示事物，对象[属性，行为]
	类与对象关系：
		将事物所有属性提取出来，形成类，一种数据类型，实例化之后就是一个对象

	属性 = 成员变量 = 字段field，一般是基本数据类型，也可以是引用类型(对象、数组)
		属性定义与变量类似，包括访问修饰符，控制访问范围的，public protected 默认 private
		一般是基本数据类型，也可以是引用类型(对象、数组)
		属性如果不赋值，有默认值，规则与数组一致，0/false/null

	Person p1 = new Person();
	p1是对象名 new Preson();创建的空间才是真正的对象

	创建：
		1. 先声明再创建
			Cat cat;
			cat = new Cat();
		2. 直接创建
			Cat cat = new Cat();

	内存分配机制
		与数组类似，
		Person p2 = p1;//把p1的空间赋给p2
		1.栈：一般存放基本数据类型，局部变量
		2.堆：存放对象
		3.方法区：常量池，加载类信息

		过程：
			先加载类信息，属性和方法信息只会加载一次
			在堆中分配空间，进行默认初始化
			把地址复制给变量，地址指向对象
			执行指定初始化

成员方法：method
	方法调用过程：
		再开一个独立栈空间，传参，执行完之后，返回结果或值到调用的位置，返回之后，空间释放
	好处：
		提高代码复用性
		可以将实现细节封装起来，其他用户调用即可

	定义：
		访问修饰符 返回类型 方法名(形参列表){
			执行语句；
			return 返回值；
		}

	细节：
		修饰符：
			控制方法使用范围；
			public protected 默认 private；
		返回值：
			一个方法最多一个返回值；返回多个值使用数组；
			返回类型可以是任意类型；
			方法要有返回数据类型，则方法体中最后的执行语句必须是return值，且类型要建通
			方法是void可以没有return语句或只写return
		命名：
			驼峰命名法
		参数列表：
			可以有多个参数，中间用,间隔
			参数类型可以是基本数据类型也可以是引用类型
			调用带参数方法，一定对用着参数列表传入相同或兼容的类型的参数
			方法定义的参数称之为形参，调用时传入的参数为实参，个数顺序必须一致
		方法体：
			不能嵌套定义方法
		调用：
			同一个类中的方法可以直接调用
			跨类需要通过对象名调用
	待定...

成员方法传参机制：
	基本数据类型，形参任何改变不影响实参；
	引用数据类型，应用类型传递的是地址，可以通过形参影响实参；

递归调用
	方法自己调用自己
	重要规则：
		1.执行一个方法时，就创建一个新的受保护的独立空间
		2.方法中的局部变量时独立的，不会互相受影响
		3.如果方法中使用的时引用变量就会共享该引用类型的数据
		4.递归条件必须向退出递归条件逼近，否则就会无限递归，StackOverflowError
		5.当一个方法执行完毕，或者遇到return，就会范围，遵守谁调用就返回给谁。

重载 overload
	java允许一个类中有多个同名方法的存在，但要求形参列表不一致
	细节：
		1.方法名相同
		2.形参列表必须不同，与形参名无关
		3.返回值无要求

可变参数
	方法名相同，功能相同，参数个数不同，用可变参数接受
	可变参数使用时可以当作数组，也可以直接传数组
	可变参数可以与普通类型参数一起放在形参列表，但必须保证可变参数在最后
	public int sum(int... nums) {

	}

作用域：
	主要变量就是属性（成员方法）和局部变量
	作用域分类：
		全局变量，也就是属性，作用域为整个类
		和局部变量 除属性之外的其他变量，作用域为定义的代码块中
	全局变量可以不赋值直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值

	细节：
		1.属性和局部变量可以重名，就近使用原则
		2.同一个作用域中，两个局部变量不能重名
		3.属性生命周期较长，伴随着对象的创建而创建，随着对象的销毁而销毁
			局部变量生命周期较短，随代码块执行而创建，随着代码块的结束而销毁
		4.全局变量可以加修饰符，局部变量不可以加修饰符

构造器：
	基本语法：
		修饰符 方法名(形参列表) {
			方法体;
		}
		说明：
			1.构造器修饰符可以是默认
			2.构造器没有返回值
			3.方法名和类名必须一样
			4.参数列表 和成员方法一样的规则
			5.构造器的调用由系统完成 --new的时候自动调用

	完成对新对象的初始化

	使用细节：
		1.一个类可以定义多个不同的构造器，即构造器的重载
		2.构造器名要与类名相同
		3.构造器没有返回值
		4.构造器是对新对象的初始化，不是创建对象
		5.在创建对象时，系统自动调用该类的构造方法
		6.如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器
		7.一旦定义了自己的构造器，默认构造器就覆盖了，就不能使用默认无参构造器，除非显示的定义一下

this：
	Java虚拟机给每个对象分配this用来代表当前对象
	哪个对象调用，this就代表那个对象

	细节：
		1.this关键字可以访问本类的属性、方法、构造器
		2.this用于区分当前类属性和局部变量
		3.访问成员方法语句： this.方法名(参数列表);
		4.访问构造器语句： this(参数列表); 只能在构造器中使用，并且置于第一条语句
		5.this不能在类定义的外部使用，只能在类定义的方法中使用



